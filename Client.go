// Code generated by mockery v1.0.0. DO NOT EDIT.

package schemaregistrymock

import mock "github.com/stretchr/testify/mock"
import schemaregistry "github.com/datamountaineer/schema-registry"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetLatestSchema provides a mock function with given fields: subject
func (_m *Client) GetLatestSchema(subject string) (schemaregistry.Schema, error) {
	ret := _m.Called(subject)

	var r0 schemaregistry.Schema
	if rf, ok := ret.Get(0).(func(string) schemaregistry.Schema); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Get(0).(schemaregistry.Schema)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaById provides a mock function with given fields: id
func (_m *Client) GetSchemaById(id int) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaBySubject provides a mock function with given fields: subject, ver
func (_m *Client) GetSchemaBySubject(subject string, ver int) (schemaregistry.Schema, error) {
	ret := _m.Called(subject, ver)

	var r0 schemaregistry.Schema
	if rf, ok := ret.Get(0).(func(string, int) schemaregistry.Schema); ok {
		r0 = rf(subject, ver)
	} else {
		r0 = ret.Get(0).(schemaregistry.Schema)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(subject, ver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRegistered provides a mock function with given fields: subject, schema
func (_m *Client) IsRegistered(subject string, schema string) (bool, schemaregistry.Schema, error) {
	ret := _m.Called(subject, schema)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(subject, schema)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 schemaregistry.Schema
	if rf, ok := ret.Get(1).(func(string, string) schemaregistry.Schema); ok {
		r1 = rf(subject, schema)
	} else {
		r1 = ret.Get(1).(schemaregistry.Schema)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(subject, schema)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RegisterNewSchema provides a mock function with given fields: subject, schema
func (_m *Client) RegisterNewSchema(subject string, schema string) (int, error) {
	ret := _m.Called(subject, schema)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(subject, schema)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subject, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subjects provides a mock function with given fields:
func (_m *Client) Subjects() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Versions provides a mock function with given fields: subject
func (_m *Client) Versions(subject string) ([]int, error) {
	ret := _m.Called(subject)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string) []int); ok {
		r0 = rf(subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
